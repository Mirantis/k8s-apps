ports:
  default:
    port: 8088
  http:
    port: 8087
  defaultUdp:
    port: 8087
    protocol: udp

replicas: 1
probeInitialDelaySeconds: 15
probeTimeoutSeconds: 5

environment_variables:
  - name: INFLUXDB_ADMIN_ENABLED
    value: "true"

image:
  repository: mirantisworkloads/
  name: "influxdb"
  tag: "1.3.4"
  pullPolicy: "IfNotPresent"

testImage:
  repository: mirantisworkloads/
  name: "test-base"
  tag: "1.0.0"
  pullPolicy: "IfNotPresent"

# Configure additional databases and listen interfaces for them
additionalDatabasesInterfacesConfigs:
  # sample graphite config
  graphite:
    # standard values
    enabled: false
    port: 2003
    #database: ""
    # additional values
    additionalValues: |
      log-enabled = true
      retention-policy = ""
      protocol = "tcp"
      batch-size = 5000
      batch-pending = 10
      batch-timeout = "1s"
      consistency-level = "one"
      separator = "."
      udp-read-buffer = 0

persistence:
  type: emptyDir
  #storageClass: ""
  #volumeSize: 1Gi
  #persistentVolumeType: "ReadWriteOnce"
  #hostPath: ""


# Configure resource requests and limits.
resources:
  #requests:
  #  memory: "256Mi"
  #  cpu: "250m"
  #limits:
    #cpu: "256Mi"
    #memory: "250m"

deployment:
  annotations: {}

service:
  type: "NodePort"
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  annotations: {}

# Invoking external configuration management
# Blog url as example and reasoning: http://apealive.net/post/helm-charts-wheelhouse
wheelhouse:
  enabled: false
#  engine: salt
#  image:
#    repository: epcim/
#    name: salt-formulas
#    tag: wheelhouse-debian-stretch-salt-stable-formula-stable
#    pullPolicy: IfNotPresent
#  #  repository: mirantisworkloads/
#  #  name: wheelhouse
#  #  tag: 1.3.4
#  #  pullPolicy: IfNotPresent
#  #
#  # Individual task specification
#  job:
#    initdb:
#      wheel:
#        - client
#      logging:
#        severity: debug
#    cronjob:
#      wheel: []
#  # Shared, consolidated, metadata structure
#  pillar:
#    influxdb:
#      client:
#        enabled: true
#        server:
#          protocol: http
#          host: $INFLUXDB_HOST
#          port: 8086
#          user: admin
#          password: password
#        user:
#          fluentd:
#            name: fluentd
#            password: password
#            enabled: true
#        database:
#            initialdb:
#              enabled: true
#              name: initialdb
#              retention_policy:
#                - name: a_year
#                  duration: 52w
#                  replication: 1
#                  is_default: true
#    # This section is only needed if I want to use influx module/state directly
#    salt:
#      minion:
#          config:
#            influxdb:
#              host: $INFLUXDB_HOST
#              port: 8086
#  # Free structure to compose execution logic that fit the engine
#  wheel:
#    client:
#      state.apply:
#        - influxdb.client
#    prune_openstack_metrics:
#      state.sls_id:
#        - prune_measurement
#        - influxdb.query
#    minion_influxdb_config:
#      state.apply:
#        /etc/salt/minion:
#          file.serialize:
#          - dataset_pillar:  salt:minion:config
#          - formatter:       yaml
#          - merge_if_exists: True
#          - makedirs: True
